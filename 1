use pyo3::prelude::*;
use pyo3::types::PyList;
pub mod dataloader;
use dataloader:DataLoader;
/// Formats the sum of two numbers as string.
#[pyfunction]
fn sum_as_string(a: usize, b: usize) -> PyResult<String> {
    Ok((a + b).to_string())
}

#[pyclass]
struct Number {
    #[pyo3(get, set)]
    value: i32,
}

#[pymethods]
impl Number {
    #[new]
    fn new(val: i32) -> Self {
        Number { value: val }
    }
}

#[pyfunction]
fn test(a: Vec<i32>, b: Vec<i32>) -> PyResult<(Vec<i32>, Vec<i32>)> {
    Ok((a.clone(), b.clone()))
}

//Wrapper for the dataloader

struct BatchProvider {
    loader: dataloader::DataLoader,
}

/// A Python module implemented in Rust. The name of this function must match
/// the `lib.name` setting in the `Cargo.toml`, else Python will not be able to
/// import the module.
#[pymodule]
fn string_sum(_py: Python<'_>, m: &PyModule) -> PyResult<()> {
    m.add_function(wrap_pyfunction!(sum_as_string, m)?)?;
    m.add_function(wrap_pyfunction!(test, m)?)?;
    m.add_class::<Number>()?;
    Ok(())
}
